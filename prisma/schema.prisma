generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String                       @id @default(cuid())
  name              String?
  email             String?                      @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              Role                         @default(STUDENT)
  accounts          Account[]
  level1Submissions AssistanceLevel1Submission[]
  level2Submissions AssistanceLevel2Submission[]
  level3Completions AssistanceLevel3Completion[]
  ownedClasses      Class[]
  enrollments       ClassEnrollment[]
  submissions       QuizSubmission[]
  sessions          Session[]
  quizProgress      StudentQuizProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  teacherId   String
  teacher     User              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  enrollments ClassEnrollment[]
  quizzes     Quiz[]
}

model ClassEnrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  classId   String
  studentId String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
}

model Quiz {
  id               String                @id @default(cuid())
  title            String
  description      String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  classId          String?
  questions        Question[]
  class            Class?                @relation(fields: [classId], references: [id])
  assistanceLevel1 QuizAssistanceLevel1?
  assistanceLevel2 QuizAssistanceLevel2?
  assistanceLevel3 QuizAssistanceLevel3?
  submissions      QuizSubmission[]
  studentProgress  StudentQuizProgress[]
}

model Question {
  id             String             @id @default(cuid())
  text           String
  imageUrl       String?
  expectedAnswer String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  quizId         String
  quiz           Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers        SubmissionAnswer[]
}

model QuizAssistanceLevel1 {
  id          String                       @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  quizId      String                       @unique
  submissions AssistanceLevel1Submission[]
  questions   AssistanceQuestionYesNo[]
  quiz        Quiz                         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model AssistanceQuestionYesNo {
  id               String                  @id @default(cuid())
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  assistanceQuizId String
  correctAnswer    Boolean
  explanation      String?
  question         String
  answers          AssistanceAnswerYesNo[]
  assistanceQuiz   QuizAssistanceLevel1    @relation(fields: [assistanceQuizId], references: [id], onDelete: Cascade)
}

model QuizAssistanceLevel2 {
  id          String                       @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  quizId      String                       @unique
  submissions AssistanceLevel2Submission[]
  questions   AssistanceQuestionEssay[]
  quiz        Quiz                         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model AssistanceQuestionEssay {
  id               String                  @id @default(cuid())
  hint             String?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  assistanceQuizId String
  correctAnswer    String
  question         String
  answers          AssistanceAnswerEssay[]
  assistanceQuiz   QuizAssistanceLevel2    @relation(fields: [assistanceQuizId], references: [id], onDelete: Cascade)
}

model QuizAssistanceLevel3 {
  id          String                       @id @default(cuid())
  title       String
  description String?
  pdfUrl      String
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  quizId      String                       @unique
  completions AssistanceLevel3Completion[]
  quiz        Quiz                         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizSubmission {
  id                String                @id @default(cuid())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  attemptNumber     Int
  status            SubmissionStatus      @default(PENDING)
  feedback          String?
  quizId            String
  studentId         String
  correctAnswers    Int?
  score             Int?
  totalQuestions    Int?
  assistanceLevel   Int?
  submittedAnswers  Json?
  quiz              Quiz                  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student           User                  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lastSubmissionFor StudentQuizProgress[]
  answers           SubmissionAnswer[]

  @@index([quizId, studentId])
}

model SubmissionAnswer {
  id           String         @id @default(cuid())
  answerText   String
  isCorrect    Boolean?
  feedback     String?
  submissionId String
  questionId   String
  score        Int?
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission   QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, questionId])
  @@index([submissionId])
}

model AssistanceLevel1Submission {
  id           String                  @id @default(cuid())
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  status       SubmissionStatus        @default(PENDING)
  assistanceId String
  studentId    String
  allCorrect   Boolean?
  score        Int?
  isCompleted  Boolean                 @default(false)
  answers      AssistanceAnswerYesNo[]
  assistance   QuizAssistanceLevel1    @relation(fields: [assistanceId], references: [id], onDelete: Cascade)
  student      User                    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([assistanceId, studentId])
}

model AssistanceAnswerYesNo {
  id           String                     @id @default(cuid())
  answer       Boolean
  isCorrect    Boolean
  submissionId String
  questionId   String
  question     AssistanceQuestionYesNo    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission   AssistanceLevel1Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, questionId])
}

model AssistanceLevel2Submission {
  id           String                  @id @default(cuid())
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  status       SubmissionStatus        @default(PENDING)
  feedback     String?
  assistanceId String
  studentId    String
  essayAnswer  String?
  isApproved   Boolean                 @default(false)
  isCompleted  Boolean                 @default(false)
  answers      AssistanceAnswerEssay[]
  assistance   QuizAssistanceLevel2    @relation(fields: [assistanceId], references: [id], onDelete: Cascade)
  student      User                    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([assistanceId, studentId])
}

model AssistanceAnswerEssay {
  id           String                     @id @default(cuid())
  answerText   String
  isCorrect    Boolean?
  feedback     String?
  submissionId String
  questionId   String
  question     AssistanceQuestionEssay    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission   AssistanceLevel2Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, questionId])
}

model AssistanceLevel3Completion {
  id           String               @id @default(cuid())
  createdAt    DateTime             @default(now())
  assistanceId String
  studentId    String
  isCompleted  Boolean              @default(false)
  readingTime  Int?
  assistance   QuizAssistanceLevel3 @relation(fields: [assistanceId], references: [id], onDelete: Cascade)
  student      User                 @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assistanceId, studentId])
}

model StudentQuizProgress {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  currentAttempt        Int                   @default(0)
  lastAttemptPassed     Boolean?
  level1Completed       Boolean               @default(false)
  level2Completed       Boolean               @default(false)
  level3Completed       Boolean               @default(false)
  quizId                String
  studentId             String
  overrideSystemFlow    Boolean               @default(false)
  level3AccessGranted   Boolean               @default(false)
  failedAttempts        Int                   @default(0)
  manuallyAssignedLevel String?
  assistanceRequired    AssistanceRequirement @default(NONE)
  nextStep              String?
  canTakeMainQuiz       Boolean               @default(true)
  level1Accessible      Boolean               @default(false)
  level1CompletedAt     DateTime?
  level2Accessible      Boolean               @default(false)
  level2CompletedAt     DateTime?
  level3Accessible      Boolean               @default(false)
  level3CompletedAt     DateTime?
  mustRetakeMainQuiz    Boolean               @default(false)
  finalStatus           SubmissionStatus?
  lastSubmissionId      String?
  lastSubmission        QuizSubmission?       @relation(fields: [lastSubmissionId], references: [id])
  quiz                  Quiz                  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student               User                  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, quizId])
}

enum Role {
  TEACHER
  STUDENT
}

enum SubmissionStatus {
  PENDING
  PASSED
  FAILED
}

enum AssistanceRequirement {
  NONE
  ASSISTANCE_LEVEL1
  ASSISTANCE_LEVEL2
  ASSISTANCE_LEVEL3
}
